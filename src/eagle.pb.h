// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eagle.proto

#ifndef PROTOBUF_INCLUDED_eagle_2eproto
#define PROTOBUF_INCLUDED_eagle_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_eagle_2eproto 

namespace protobuf_eagle_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_eagle_2eproto
namespace eagle {
class ErrorResponse;
class ErrorResponseDefaultTypeInternal;
extern ErrorResponseDefaultTypeInternal _ErrorResponse_default_instance_;
class GetFitness;
class GetFitnessDefaultTypeInternal;
extern GetFitnessDefaultTypeInternal _GetFitness_default_instance_;
class GetFitnessResponse;
class GetFitnessResponseDefaultTypeInternal;
extern GetFitnessResponseDefaultTypeInternal _GetFitnessResponse_default_instance_;
class GetGraph;
class GetGraphDefaultTypeInternal;
extern GetGraphDefaultTypeInternal _GetGraph_default_instance_;
class GetGraphResponse;
class GetGraphResponseDefaultTypeInternal;
extern GetGraphResponseDefaultTypeInternal _GetGraphResponse_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SetGraph;
class SetGraphDefaultTypeInternal;
extern SetGraphDefaultTypeInternal _SetGraph_default_instance_;
class SuccessResponse;
class SuccessResponseDefaultTypeInternal;
extern SuccessResponseDefaultTypeInternal _SuccessResponse_default_instance_;
}  // namespace eagle
namespace google {
namespace protobuf {
template<> ::eagle::ErrorResponse* Arena::CreateMaybeMessage<::eagle::ErrorResponse>(Arena*);
template<> ::eagle::GetFitness* Arena::CreateMaybeMessage<::eagle::GetFitness>(Arena*);
template<> ::eagle::GetFitnessResponse* Arena::CreateMaybeMessage<::eagle::GetFitnessResponse>(Arena*);
template<> ::eagle::GetGraph* Arena::CreateMaybeMessage<::eagle::GetGraph>(Arena*);
template<> ::eagle::GetGraphResponse* Arena::CreateMaybeMessage<::eagle::GetGraphResponse>(Arena*);
template<> ::eagle::Request* Arena::CreateMaybeMessage<::eagle::Request>(Arena*);
template<> ::eagle::Response* Arena::CreateMaybeMessage<::eagle::Response>(Arena*);
template<> ::eagle::SetGraph* Arena::CreateMaybeMessage<::eagle::SetGraph>(Arena*);
template<> ::eagle::SuccessResponse* Arena::CreateMaybeMessage<::eagle::SuccessResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace eagle {

// ===================================================================

class GetFitness : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eagle.GetFitness) */ {
 public:
  GetFitness();
  virtual ~GetFitness();

  GetFitness(const GetFitness& from);

  inline GetFitness& operator=(const GetFitness& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFitness(GetFitness&& from) noexcept
    : GetFitness() {
    *this = ::std::move(from);
  }

  inline GetFitness& operator=(GetFitness&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFitness& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFitness* internal_default_instance() {
    return reinterpret_cast<const GetFitness*>(
               &_GetFitness_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetFitness* other);
  friend void swap(GetFitness& a, GetFitness& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFitness* New() const final {
    return CreateMaybeMessage<GetFitness>(NULL);
  }

  GetFitness* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetFitness>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetFitness& from);
  void MergeFrom(const GetFitness& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFitness* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:eagle.GetFitness)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_eagle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetFitnessResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eagle.GetFitnessResponse) */ {
 public:
  GetFitnessResponse();
  virtual ~GetFitnessResponse();

  GetFitnessResponse(const GetFitnessResponse& from);

  inline GetFitnessResponse& operator=(const GetFitnessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFitnessResponse(GetFitnessResponse&& from) noexcept
    : GetFitnessResponse() {
    *this = ::std::move(from);
  }

  inline GetFitnessResponse& operator=(GetFitnessResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFitnessResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFitnessResponse* internal_default_instance() {
    return reinterpret_cast<const GetFitnessResponse*>(
               &_GetFitnessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetFitnessResponse* other);
  friend void swap(GetFitnessResponse& a, GetFitnessResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFitnessResponse* New() const final {
    return CreateMaybeMessage<GetFitnessResponse>(NULL);
  }

  GetFitnessResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetFitnessResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetFitnessResponse& from);
  void MergeFrom(const GetFitnessResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFitnessResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float fitness = 1;
  bool has_fitness() const;
  void clear_fitness();
  static const int kFitnessFieldNumber = 1;
  float fitness() const;
  void set_fitness(float value);

  // @@protoc_insertion_point(class_scope:eagle.GetFitnessResponse)
 private:
  void set_has_fitness();
  void clear_has_fitness();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float fitness_;
  friend struct ::protobuf_eagle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetGraph : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eagle.GetGraph) */ {
 public:
  GetGraph();
  virtual ~GetGraph();

  GetGraph(const GetGraph& from);

  inline GetGraph& operator=(const GetGraph& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetGraph(GetGraph&& from) noexcept
    : GetGraph() {
    *this = ::std::move(from);
  }

  inline GetGraph& operator=(GetGraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGraph* internal_default_instance() {
    return reinterpret_cast<const GetGraph*>(
               &_GetGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetGraph* other);
  friend void swap(GetGraph& a, GetGraph& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetGraph* New() const final {
    return CreateMaybeMessage<GetGraph>(NULL);
  }

  GetGraph* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetGraph>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetGraph& from);
  void MergeFrom(const GetGraph& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGraph* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:eagle.GetGraph)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_eagle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetGraphResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eagle.GetGraphResponse) */ {
 public:
  GetGraphResponse();
  virtual ~GetGraphResponse();

  GetGraphResponse(const GetGraphResponse& from);

  inline GetGraphResponse& operator=(const GetGraphResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetGraphResponse(GetGraphResponse&& from) noexcept
    : GetGraphResponse() {
    *this = ::std::move(from);
  }

  inline GetGraphResponse& operator=(GetGraphResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGraphResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGraphResponse* internal_default_instance() {
    return reinterpret_cast<const GetGraphResponse*>(
               &_GetGraphResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetGraphResponse* other);
  friend void swap(GetGraphResponse& a, GetGraphResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetGraphResponse* New() const final {
    return CreateMaybeMessage<GetGraphResponse>(NULL);
  }

  GetGraphResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetGraphResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetGraphResponse& from);
  void MergeFrom(const GetGraphResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGraphResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes graph = 2;
  bool has_graph() const;
  void clear_graph();
  static const int kGraphFieldNumber = 2;
  const ::std::string& graph() const;
  void set_graph(const ::std::string& value);
  #if LANG_CXX11
  void set_graph(::std::string&& value);
  #endif
  void set_graph(const char* value);
  void set_graph(const void* value, size_t size);
  ::std::string* mutable_graph();
  ::std::string* release_graph();
  void set_allocated_graph(::std::string* graph);

  // required float fitness = 1;
  bool has_fitness() const;
  void clear_fitness();
  static const int kFitnessFieldNumber = 1;
  float fitness() const;
  void set_fitness(float value);

  // @@protoc_insertion_point(class_scope:eagle.GetGraphResponse)
 private:
  void set_has_fitness();
  void clear_has_fitness();
  void set_has_graph();
  void clear_has_graph();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr graph_;
  float fitness_;
  friend struct ::protobuf_eagle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetGraph : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eagle.SetGraph) */ {
 public:
  SetGraph();
  virtual ~SetGraph();

  SetGraph(const SetGraph& from);

  inline SetGraph& operator=(const SetGraph& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetGraph(SetGraph&& from) noexcept
    : SetGraph() {
    *this = ::std::move(from);
  }

  inline SetGraph& operator=(SetGraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGraph* internal_default_instance() {
    return reinterpret_cast<const SetGraph*>(
               &_SetGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SetGraph* other);
  friend void swap(SetGraph& a, SetGraph& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetGraph* New() const final {
    return CreateMaybeMessage<SetGraph>(NULL);
  }

  SetGraph* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetGraph>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetGraph& from);
  void MergeFrom(const SetGraph& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGraph* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes graph = 2;
  bool has_graph() const;
  void clear_graph();
  static const int kGraphFieldNumber = 2;
  const ::std::string& graph() const;
  void set_graph(const ::std::string& value);
  #if LANG_CXX11
  void set_graph(::std::string&& value);
  #endif
  void set_graph(const char* value);
  void set_graph(const void* value, size_t size);
  ::std::string* mutable_graph();
  ::std::string* release_graph();
  void set_allocated_graph(::std::string* graph);

  // required float fitness = 1;
  bool has_fitness() const;
  void clear_fitness();
  static const int kFitnessFieldNumber = 1;
  float fitness() const;
  void set_fitness(float value);

  // @@protoc_insertion_point(class_scope:eagle.SetGraph)
 private:
  void set_has_fitness();
  void clear_has_fitness();
  void set_has_graph();
  void clear_has_graph();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr graph_;
  float fitness_;
  friend struct ::protobuf_eagle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuccessResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eagle.SuccessResponse) */ {
 public:
  SuccessResponse();
  virtual ~SuccessResponse();

  SuccessResponse(const SuccessResponse& from);

  inline SuccessResponse& operator=(const SuccessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuccessResponse(SuccessResponse&& from) noexcept
    : SuccessResponse() {
    *this = ::std::move(from);
  }

  inline SuccessResponse& operator=(SuccessResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuccessResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SuccessResponse* internal_default_instance() {
    return reinterpret_cast<const SuccessResponse*>(
               &_SuccessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SuccessResponse* other);
  friend void swap(SuccessResponse& a, SuccessResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuccessResponse* New() const final {
    return CreateMaybeMessage<SuccessResponse>(NULL);
  }

  SuccessResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SuccessResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SuccessResponse& from);
  void MergeFrom(const SuccessResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuccessResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:eagle.SuccessResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_eagle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ErrorResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eagle.ErrorResponse) */ {
 public:
  ErrorResponse();
  virtual ~ErrorResponse();

  ErrorResponse(const ErrorResponse& from);

  inline ErrorResponse& operator=(const ErrorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrorResponse(ErrorResponse&& from) noexcept
    : ErrorResponse() {
    *this = ::std::move(from);
  }

  inline ErrorResponse& operator=(ErrorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorResponse* internal_default_instance() {
    return reinterpret_cast<const ErrorResponse*>(
               &_ErrorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ErrorResponse* other);
  friend void swap(ErrorResponse& a, ErrorResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorResponse* New() const final {
    return CreateMaybeMessage<ErrorResponse>(NULL);
  }

  ErrorResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ErrorResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ErrorResponse& from);
  void MergeFrom(const ErrorResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required uint32 status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:eagle.ErrorResponse)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_message();
  void clear_has_message();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::uint32 status_;
  friend struct ::protobuf_eagle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eagle.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  enum RequestCase {
    kGetFitness = 10,
    kGetGraph = 11,
    kSetGraph = 12,
    REQUEST_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(NULL);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .eagle.GetFitness get_fitness = 10;
  bool has_get_fitness() const;
  void clear_get_fitness();
  static const int kGetFitnessFieldNumber = 10;
  private:
  const ::eagle::GetFitness& _internal_get_fitness() const;
  public:
  const ::eagle::GetFitness& get_fitness() const;
  ::eagle::GetFitness* release_get_fitness();
  ::eagle::GetFitness* mutable_get_fitness();
  void set_allocated_get_fitness(::eagle::GetFitness* get_fitness);

  // optional .eagle.GetGraph get_graph = 11;
  bool has_get_graph() const;
  void clear_get_graph();
  static const int kGetGraphFieldNumber = 11;
  private:
  const ::eagle::GetGraph& _internal_get_graph() const;
  public:
  const ::eagle::GetGraph& get_graph() const;
  ::eagle::GetGraph* release_get_graph();
  ::eagle::GetGraph* mutable_get_graph();
  void set_allocated_get_graph(::eagle::GetGraph* get_graph);

  // optional .eagle.SetGraph set_graph = 12;
  bool has_set_graph() const;
  void clear_set_graph();
  static const int kSetGraphFieldNumber = 12;
  private:
  const ::eagle::SetGraph& _internal_set_graph() const;
  public:
  const ::eagle::SetGraph& set_graph() const;
  ::eagle::SetGraph* release_set_graph();
  ::eagle::SetGraph* mutable_set_graph();
  void set_allocated_set_graph(::eagle::SetGraph* set_graph);

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:eagle.Request)
 private:
  void set_has_get_fitness();
  void set_has_get_graph();
  void set_has_set_graph();

  inline bool has_request() const;
  inline void clear_has_request();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union RequestUnion {
    RequestUnion() {}
    ::eagle::GetFitness* get_fitness_;
    ::eagle::GetGraph* get_graph_;
    ::eagle::SetGraph* set_graph_;
  } request_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_eagle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eagle.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  enum ResponseCase {
    kGetFitness = 10,
    kGetGraph = 11,
    kSuccess = 12,
    kError = 13,
    RESPONSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(NULL);
  }

  Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .eagle.GetFitnessResponse get_fitness = 10;
  bool has_get_fitness() const;
  void clear_get_fitness();
  static const int kGetFitnessFieldNumber = 10;
  private:
  const ::eagle::GetFitnessResponse& _internal_get_fitness() const;
  public:
  const ::eagle::GetFitnessResponse& get_fitness() const;
  ::eagle::GetFitnessResponse* release_get_fitness();
  ::eagle::GetFitnessResponse* mutable_get_fitness();
  void set_allocated_get_fitness(::eagle::GetFitnessResponse* get_fitness);

  // optional .eagle.GetGraphResponse get_graph = 11;
  bool has_get_graph() const;
  void clear_get_graph();
  static const int kGetGraphFieldNumber = 11;
  private:
  const ::eagle::GetGraphResponse& _internal_get_graph() const;
  public:
  const ::eagle::GetGraphResponse& get_graph() const;
  ::eagle::GetGraphResponse* release_get_graph();
  ::eagle::GetGraphResponse* mutable_get_graph();
  void set_allocated_get_graph(::eagle::GetGraphResponse* get_graph);

  // optional .eagle.SuccessResponse success = 12;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 12;
  private:
  const ::eagle::SuccessResponse& _internal_success() const;
  public:
  const ::eagle::SuccessResponse& success() const;
  ::eagle::SuccessResponse* release_success();
  ::eagle::SuccessResponse* mutable_success();
  void set_allocated_success(::eagle::SuccessResponse* success);

  // optional .eagle.ErrorResponse error = 13;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 13;
  private:
  const ::eagle::ErrorResponse& _internal_error() const;
  public:
  const ::eagle::ErrorResponse& error() const;
  ::eagle::ErrorResponse* release_error();
  ::eagle::ErrorResponse* mutable_error();
  void set_allocated_error(::eagle::ErrorResponse* error);

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:eagle.Response)
 private:
  void set_has_get_fitness();
  void set_has_get_graph();
  void set_has_success();
  void set_has_error();

  inline bool has_response() const;
  inline void clear_has_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union ResponseUnion {
    ResponseUnion() {}
    ::eagle::GetFitnessResponse* get_fitness_;
    ::eagle::GetGraphResponse* get_graph_;
    ::eagle::SuccessResponse* success_;
    ::eagle::ErrorResponse* error_;
  } response_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_eagle_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetFitness

// -------------------------------------------------------------------

// GetFitnessResponse

// required float fitness = 1;
inline bool GetFitnessResponse::has_fitness() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFitnessResponse::set_has_fitness() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetFitnessResponse::clear_has_fitness() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetFitnessResponse::clear_fitness() {
  fitness_ = 0;
  clear_has_fitness();
}
inline float GetFitnessResponse::fitness() const {
  // @@protoc_insertion_point(field_get:eagle.GetFitnessResponse.fitness)
  return fitness_;
}
inline void GetFitnessResponse::set_fitness(float value) {
  set_has_fitness();
  fitness_ = value;
  // @@protoc_insertion_point(field_set:eagle.GetFitnessResponse.fitness)
}

// -------------------------------------------------------------------

// GetGraph

// -------------------------------------------------------------------

// GetGraphResponse

// required float fitness = 1;
inline bool GetGraphResponse::has_fitness() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetGraphResponse::set_has_fitness() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetGraphResponse::clear_has_fitness() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetGraphResponse::clear_fitness() {
  fitness_ = 0;
  clear_has_fitness();
}
inline float GetGraphResponse::fitness() const {
  // @@protoc_insertion_point(field_get:eagle.GetGraphResponse.fitness)
  return fitness_;
}
inline void GetGraphResponse::set_fitness(float value) {
  set_has_fitness();
  fitness_ = value;
  // @@protoc_insertion_point(field_set:eagle.GetGraphResponse.fitness)
}

// required bytes graph = 2;
inline bool GetGraphResponse::has_graph() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetGraphResponse::set_has_graph() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetGraphResponse::clear_has_graph() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetGraphResponse::clear_graph() {
  graph_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_graph();
}
inline const ::std::string& GetGraphResponse::graph() const {
  // @@protoc_insertion_point(field_get:eagle.GetGraphResponse.graph)
  return graph_.GetNoArena();
}
inline void GetGraphResponse::set_graph(const ::std::string& value) {
  set_has_graph();
  graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eagle.GetGraphResponse.graph)
}
#if LANG_CXX11
inline void GetGraphResponse::set_graph(::std::string&& value) {
  set_has_graph();
  graph_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eagle.GetGraphResponse.graph)
}
#endif
inline void GetGraphResponse::set_graph(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_graph();
  graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eagle.GetGraphResponse.graph)
}
inline void GetGraphResponse::set_graph(const void* value, size_t size) {
  set_has_graph();
  graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eagle.GetGraphResponse.graph)
}
inline ::std::string* GetGraphResponse::mutable_graph() {
  set_has_graph();
  // @@protoc_insertion_point(field_mutable:eagle.GetGraphResponse.graph)
  return graph_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetGraphResponse::release_graph() {
  // @@protoc_insertion_point(field_release:eagle.GetGraphResponse.graph)
  if (!has_graph()) {
    return NULL;
  }
  clear_has_graph();
  return graph_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetGraphResponse::set_allocated_graph(::std::string* graph) {
  if (graph != NULL) {
    set_has_graph();
  } else {
    clear_has_graph();
  }
  graph_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph);
  // @@protoc_insertion_point(field_set_allocated:eagle.GetGraphResponse.graph)
}

// -------------------------------------------------------------------

// SetGraph

// required float fitness = 1;
inline bool SetGraph::has_fitness() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetGraph::set_has_fitness() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetGraph::clear_has_fitness() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetGraph::clear_fitness() {
  fitness_ = 0;
  clear_has_fitness();
}
inline float SetGraph::fitness() const {
  // @@protoc_insertion_point(field_get:eagle.SetGraph.fitness)
  return fitness_;
}
inline void SetGraph::set_fitness(float value) {
  set_has_fitness();
  fitness_ = value;
  // @@protoc_insertion_point(field_set:eagle.SetGraph.fitness)
}

// required bytes graph = 2;
inline bool SetGraph::has_graph() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetGraph::set_has_graph() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetGraph::clear_has_graph() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetGraph::clear_graph() {
  graph_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_graph();
}
inline const ::std::string& SetGraph::graph() const {
  // @@protoc_insertion_point(field_get:eagle.SetGraph.graph)
  return graph_.GetNoArena();
}
inline void SetGraph::set_graph(const ::std::string& value) {
  set_has_graph();
  graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eagle.SetGraph.graph)
}
#if LANG_CXX11
inline void SetGraph::set_graph(::std::string&& value) {
  set_has_graph();
  graph_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eagle.SetGraph.graph)
}
#endif
inline void SetGraph::set_graph(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_graph();
  graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eagle.SetGraph.graph)
}
inline void SetGraph::set_graph(const void* value, size_t size) {
  set_has_graph();
  graph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eagle.SetGraph.graph)
}
inline ::std::string* SetGraph::mutable_graph() {
  set_has_graph();
  // @@protoc_insertion_point(field_mutable:eagle.SetGraph.graph)
  return graph_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetGraph::release_graph() {
  // @@protoc_insertion_point(field_release:eagle.SetGraph.graph)
  if (!has_graph()) {
    return NULL;
  }
  clear_has_graph();
  return graph_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetGraph::set_allocated_graph(::std::string* graph) {
  if (graph != NULL) {
    set_has_graph();
  } else {
    clear_has_graph();
  }
  graph_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph);
  // @@protoc_insertion_point(field_set_allocated:eagle.SetGraph.graph)
}

// -------------------------------------------------------------------

// SuccessResponse

// -------------------------------------------------------------------

// ErrorResponse

// required uint32 status = 1;
inline bool ErrorResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ErrorResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ErrorResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ErrorResponse::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 ErrorResponse::status() const {
  // @@protoc_insertion_point(field_get:eagle.ErrorResponse.status)
  return status_;
}
inline void ErrorResponse::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:eagle.ErrorResponse.status)
}

// required string message = 2;
inline bool ErrorResponse::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrorResponse::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrorResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrorResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& ErrorResponse::message() const {
  // @@protoc_insertion_point(field_get:eagle.ErrorResponse.message)
  return message_.GetNoArena();
}
inline void ErrorResponse::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eagle.ErrorResponse.message)
}
#if LANG_CXX11
inline void ErrorResponse::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eagle.ErrorResponse.message)
}
#endif
inline void ErrorResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eagle.ErrorResponse.message)
}
inline void ErrorResponse::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eagle.ErrorResponse.message)
}
inline ::std::string* ErrorResponse::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:eagle.ErrorResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorResponse::release_message() {
  // @@protoc_insertion_point(field_release:eagle.ErrorResponse.message)
  if (!has_message()) {
    return NULL;
  }
  clear_has_message();
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:eagle.ErrorResponse.message)
}

// -------------------------------------------------------------------

// Request

// optional .eagle.GetFitness get_fitness = 10;
inline bool Request::has_get_fitness() const {
  return request_case() == kGetFitness;
}
inline void Request::set_has_get_fitness() {
  _oneof_case_[0] = kGetFitness;
}
inline void Request::clear_get_fitness() {
  if (has_get_fitness()) {
    delete request_.get_fitness_;
    clear_has_request();
  }
}
inline const ::eagle::GetFitness& Request::_internal_get_fitness() const {
  return *request_.get_fitness_;
}
inline ::eagle::GetFitness* Request::release_get_fitness() {
  // @@protoc_insertion_point(field_release:eagle.Request.get_fitness)
  if (has_get_fitness()) {
    clear_has_request();
      ::eagle::GetFitness* temp = request_.get_fitness_;
    request_.get_fitness_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::eagle::GetFitness& Request::get_fitness() const {
  // @@protoc_insertion_point(field_get:eagle.Request.get_fitness)
  return has_get_fitness()
      ? *request_.get_fitness_
      : *reinterpret_cast< ::eagle::GetFitness*>(&::eagle::_GetFitness_default_instance_);
}
inline ::eagle::GetFitness* Request::mutable_get_fitness() {
  if (!has_get_fitness()) {
    clear_request();
    set_has_get_fitness();
    request_.get_fitness_ = CreateMaybeMessage< ::eagle::GetFitness >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:eagle.Request.get_fitness)
  return request_.get_fitness_;
}

// optional .eagle.GetGraph get_graph = 11;
inline bool Request::has_get_graph() const {
  return request_case() == kGetGraph;
}
inline void Request::set_has_get_graph() {
  _oneof_case_[0] = kGetGraph;
}
inline void Request::clear_get_graph() {
  if (has_get_graph()) {
    delete request_.get_graph_;
    clear_has_request();
  }
}
inline const ::eagle::GetGraph& Request::_internal_get_graph() const {
  return *request_.get_graph_;
}
inline ::eagle::GetGraph* Request::release_get_graph() {
  // @@protoc_insertion_point(field_release:eagle.Request.get_graph)
  if (has_get_graph()) {
    clear_has_request();
      ::eagle::GetGraph* temp = request_.get_graph_;
    request_.get_graph_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::eagle::GetGraph& Request::get_graph() const {
  // @@protoc_insertion_point(field_get:eagle.Request.get_graph)
  return has_get_graph()
      ? *request_.get_graph_
      : *reinterpret_cast< ::eagle::GetGraph*>(&::eagle::_GetGraph_default_instance_);
}
inline ::eagle::GetGraph* Request::mutable_get_graph() {
  if (!has_get_graph()) {
    clear_request();
    set_has_get_graph();
    request_.get_graph_ = CreateMaybeMessage< ::eagle::GetGraph >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:eagle.Request.get_graph)
  return request_.get_graph_;
}

// optional .eagle.SetGraph set_graph = 12;
inline bool Request::has_set_graph() const {
  return request_case() == kSetGraph;
}
inline void Request::set_has_set_graph() {
  _oneof_case_[0] = kSetGraph;
}
inline void Request::clear_set_graph() {
  if (has_set_graph()) {
    delete request_.set_graph_;
    clear_has_request();
  }
}
inline const ::eagle::SetGraph& Request::_internal_set_graph() const {
  return *request_.set_graph_;
}
inline ::eagle::SetGraph* Request::release_set_graph() {
  // @@protoc_insertion_point(field_release:eagle.Request.set_graph)
  if (has_set_graph()) {
    clear_has_request();
      ::eagle::SetGraph* temp = request_.set_graph_;
    request_.set_graph_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::eagle::SetGraph& Request::set_graph() const {
  // @@protoc_insertion_point(field_get:eagle.Request.set_graph)
  return has_set_graph()
      ? *request_.set_graph_
      : *reinterpret_cast< ::eagle::SetGraph*>(&::eagle::_SetGraph_default_instance_);
}
inline ::eagle::SetGraph* Request::mutable_set_graph() {
  if (!has_set_graph()) {
    clear_request();
    set_has_set_graph();
    request_.set_graph_ = CreateMaybeMessage< ::eagle::SetGraph >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:eagle.Request.set_graph)
  return request_.set_graph_;
}

inline bool Request::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void Request::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline Request::RequestCase Request::request_case() const {
  return Request::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response

// optional .eagle.GetFitnessResponse get_fitness = 10;
inline bool Response::has_get_fitness() const {
  return response_case() == kGetFitness;
}
inline void Response::set_has_get_fitness() {
  _oneof_case_[0] = kGetFitness;
}
inline void Response::clear_get_fitness() {
  if (has_get_fitness()) {
    delete response_.get_fitness_;
    clear_has_response();
  }
}
inline const ::eagle::GetFitnessResponse& Response::_internal_get_fitness() const {
  return *response_.get_fitness_;
}
inline ::eagle::GetFitnessResponse* Response::release_get_fitness() {
  // @@protoc_insertion_point(field_release:eagle.Response.get_fitness)
  if (has_get_fitness()) {
    clear_has_response();
      ::eagle::GetFitnessResponse* temp = response_.get_fitness_;
    response_.get_fitness_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::eagle::GetFitnessResponse& Response::get_fitness() const {
  // @@protoc_insertion_point(field_get:eagle.Response.get_fitness)
  return has_get_fitness()
      ? *response_.get_fitness_
      : *reinterpret_cast< ::eagle::GetFitnessResponse*>(&::eagle::_GetFitnessResponse_default_instance_);
}
inline ::eagle::GetFitnessResponse* Response::mutable_get_fitness() {
  if (!has_get_fitness()) {
    clear_response();
    set_has_get_fitness();
    response_.get_fitness_ = CreateMaybeMessage< ::eagle::GetFitnessResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:eagle.Response.get_fitness)
  return response_.get_fitness_;
}

// optional .eagle.GetGraphResponse get_graph = 11;
inline bool Response::has_get_graph() const {
  return response_case() == kGetGraph;
}
inline void Response::set_has_get_graph() {
  _oneof_case_[0] = kGetGraph;
}
inline void Response::clear_get_graph() {
  if (has_get_graph()) {
    delete response_.get_graph_;
    clear_has_response();
  }
}
inline const ::eagle::GetGraphResponse& Response::_internal_get_graph() const {
  return *response_.get_graph_;
}
inline ::eagle::GetGraphResponse* Response::release_get_graph() {
  // @@protoc_insertion_point(field_release:eagle.Response.get_graph)
  if (has_get_graph()) {
    clear_has_response();
      ::eagle::GetGraphResponse* temp = response_.get_graph_;
    response_.get_graph_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::eagle::GetGraphResponse& Response::get_graph() const {
  // @@protoc_insertion_point(field_get:eagle.Response.get_graph)
  return has_get_graph()
      ? *response_.get_graph_
      : *reinterpret_cast< ::eagle::GetGraphResponse*>(&::eagle::_GetGraphResponse_default_instance_);
}
inline ::eagle::GetGraphResponse* Response::mutable_get_graph() {
  if (!has_get_graph()) {
    clear_response();
    set_has_get_graph();
    response_.get_graph_ = CreateMaybeMessage< ::eagle::GetGraphResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:eagle.Response.get_graph)
  return response_.get_graph_;
}

// optional .eagle.SuccessResponse success = 12;
inline bool Response::has_success() const {
  return response_case() == kSuccess;
}
inline void Response::set_has_success() {
  _oneof_case_[0] = kSuccess;
}
inline void Response::clear_success() {
  if (has_success()) {
    delete response_.success_;
    clear_has_response();
  }
}
inline const ::eagle::SuccessResponse& Response::_internal_success() const {
  return *response_.success_;
}
inline ::eagle::SuccessResponse* Response::release_success() {
  // @@protoc_insertion_point(field_release:eagle.Response.success)
  if (has_success()) {
    clear_has_response();
      ::eagle::SuccessResponse* temp = response_.success_;
    response_.success_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::eagle::SuccessResponse& Response::success() const {
  // @@protoc_insertion_point(field_get:eagle.Response.success)
  return has_success()
      ? *response_.success_
      : *reinterpret_cast< ::eagle::SuccessResponse*>(&::eagle::_SuccessResponse_default_instance_);
}
inline ::eagle::SuccessResponse* Response::mutable_success() {
  if (!has_success()) {
    clear_response();
    set_has_success();
    response_.success_ = CreateMaybeMessage< ::eagle::SuccessResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:eagle.Response.success)
  return response_.success_;
}

// optional .eagle.ErrorResponse error = 13;
inline bool Response::has_error() const {
  return response_case() == kError;
}
inline void Response::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void Response::clear_error() {
  if (has_error()) {
    delete response_.error_;
    clear_has_response();
  }
}
inline const ::eagle::ErrorResponse& Response::_internal_error() const {
  return *response_.error_;
}
inline ::eagle::ErrorResponse* Response::release_error() {
  // @@protoc_insertion_point(field_release:eagle.Response.error)
  if (has_error()) {
    clear_has_response();
      ::eagle::ErrorResponse* temp = response_.error_;
    response_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::eagle::ErrorResponse& Response::error() const {
  // @@protoc_insertion_point(field_get:eagle.Response.error)
  return has_error()
      ? *response_.error_
      : *reinterpret_cast< ::eagle::ErrorResponse*>(&::eagle::_ErrorResponse_default_instance_);
}
inline ::eagle::ErrorResponse* Response::mutable_error() {
  if (!has_error()) {
    clear_response();
    set_has_error();
    response_.error_ = CreateMaybeMessage< ::eagle::ErrorResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:eagle.Response.error)
  return response_.error_;
}

inline bool Response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void Response::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline Response::ResponseCase Response::response_case() const {
  return Response::ResponseCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace eagle

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_eagle_2eproto
